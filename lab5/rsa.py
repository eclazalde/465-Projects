import random
import OpenSSL
import pyprimes
import os

def ModEx(g, s, p):	
	if p == 1:
		print 0
		
	result = 1
	g = g % p
	while s > 0:
		if (s % 2 == 1):
			result = (result * g) % p
		s = s >> 1
		g = (g * g) % p
	
	return '{}'.format(result)

def egcd(a, b):
    x,y, u,v = 0,1, 1,0
    while a != 0:
        q, r = b//a, b%a
        m, n = x-u*q, y-v*q
        b,a, x,y, u,v = a,r, u,v, m,n
    gcd = b
    return gcd, x, y
		
def gcd(a,b):
	while b:
		a, b = b, a%b
	return a
		
def LargePrime():
	f = os.popen('openssl prime -generate -bits 512')
	prime = f.read()
	return int(prime)

if __name__ == '__main__':
    e = 65537
    #p = LargePrime()
    #q = LargePrime()
    p = 11740027063892728556677014861958144139421957110775799247049392790608884716975535031564121817341832315858809593139896598905221416975124125085031251216613963
    q = 12463807338406224216979973534936363816949751118195375484013906073150302369062361245396690397459851224519823829172468612613637231887668470663629546679101569
    
    phi = (p-1) * (q-1)
    n = p * q
    
    if gcd(phi,e) != 1:
		print 'bad primes'
		exit(1)
    
    d = egcd(phi,e)
    
    #print '{}\n{}'.format(p,q)
    print n
    print d[2]
    
    m = 212788291171290661843158364587637197333531097895143818988755059744299426205080018037256906030614828346200464605058471107535343001238694433356829682872
    print ModEx(m, e, n)
    
    c = 100093053526165328140886461889101523489862352414621826625637448708095792204069386446079182538095115339631863456126675188936674668791956476463981014665892130343459857917503193165575546076237806136768868989425646156281733364652618398179216764702371055118189414723395097905238265181163609114539661344165356268261
    print ModEx(c, d[2], n)
